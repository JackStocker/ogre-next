
//#include "SyntaxHighlightingMisc.h"

@property( hlms_particle_system )

@piece( ParticleSystemDeclVS )
CONST_BUFFER_STRUCT_BEGIN( GpuParticleCommon, @value(particleSystemConstSlot) )
{
	float4 dir;
	float4 up;
}
CONST_BUFFER_STRUCT_END( particleCommon );

ReadOnlyBufferU( @value(particleSystemSlot), uint4, particleSystemGpuData );
@end

@piece( ParticleSystemStructDeclVS )
	struct ParticleGpuData
	{
		float2 dim;
		float3 pos;
		float3 dir;
		float rotation;
		float4 colour;
	};

	ParticleGpuData loadParticleGpuData()
	{
		ParticleGpuData retVal;

		// const uint particleId = uint( inVs_vertexId ) / 6u;
		const uint particleId = uint( inVs_vertexId ) / 4u;
		uint4 tmp;
		tmp = readOnlyFetch( particleSystemGpuData, particleId * 2u );
		retVal.dim.xy = uintBitsToFloat( tmp.xy );
		retVal.pos.xy = uintBitsToFloat( tmp.zw );
		tmp = readOnlyFetch( particleSystemGpuData, particleId * 2u + 1u );
		retVal.pos.z = uintBitsToFloat( tmp.x );
		float4 tmp2 = unpackSnorm4x8( tmp.y );
		retVal.dir.xyz = tmp2.xyz;
		retVal.colour.w = tmp2.w * 0.5f + 0.5f;
		tmp2.xy = unpackSnorm2x16( tmp.z );
		retVal.rotation = tmp2.x;
		retVal.colour.x = tmp2.y;
		retVal.colour.yz = unpackSnorm2x16( tmp.w );

		return retVal;
	}
@end

@piece( DoParticleSystemVS )
	const ParticleGpuData particleData = loadParticleGpuData();

	const uint vertexInQuad = uint( inVs_vertexId ) & 0x03u;

	@property( hlms_particle_type == particle_type_point )
		// In point type, these are in view space
		const float3 particleRightVec =
			mul( toFloat3x3( passBuf.view ), float3( particleData.dim.x, 0, 0 ) );
		const float3 particleUpVec =
			mul( toFloat3x3( passBuf.view ), float3( 0, particleData.dim.y, 0 ) );
	@end
	@property( hlms_particle_type == particle_type_oriented_common )
		const float3 particleCamDir =
			mul( toFloat3x3( passBuf.view ), float3( 0, 0, -particleData.dim.x ) );
		const float3 particleRightVec = cross( particleCamDir, particleCommon.dir.xyz );
		const float3 particleUpVec = particleCommon.dir.xyz * particleData.dim.y;
	@end
	@property( hlms_particle_type == particle_type_oriented_self )
		const float3 particleCamDir =
			mul( toFloat3x3( passBuf.view ), float3( 0, 0, -particleData.dim.x ) );
		const float3 particleRightVec = cross( particleCamDir, particleData.dir );
		const float3 particleUpVec = particleData.dir * particleData.dim.y;
	@end
	@property( hlms_particle_type == particle_type_perpendicular_common )
		// In this mode, particleCommon.up.xyz actually contains
		// cross( particleCommon.up.xyz, particleCommon.dir.xyz )
		const float3 particleUpVec = particleCommon.up.xyz * particleData.dim.y;
		const float3 particleRightVec = particleCommon.dir.xyz * particleData.dim.x;
	@end
	@property( hlms_particle_type == particle_type_perpendicular_self )
		const float3 particleRightVecNorm = cross( particleCommon.up.xyz, particleData.dir );
		const float3 particleUpVec =
			cross( particleData.dir, particleRightVecNorm ) * particleData.dim.y;
		const float3 particleRightVec = particleRightVecNorm * particleData.dim.x;
	@end
	#undef inVs_vertex
	float4 inVs_vertex = float4( particleData.pos, 1.0f );

	inVs_vertex.xyz += particleRightVec * ( vertexInQuad < 2u ? -1.0f : 1.0f );
	inVs_vertex.xyz += particleUpVec * ( ( vertexInQuad & 0x01u ) != 0u ? -1.0f : 1.0f );

	#undef inVs_uv0
	float2 inVs_uv0;
	inVs_uv0.x = vertexInQuad < 2u ? 0.0f : 1.0f;
	inVs_uv0.y = ( ( vertexInQuad & 0x01u ) != 0u ? 0.0f : 1.0f );
@end
@end
